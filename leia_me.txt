**Objetivo**:
Este projeto tem como objetivo contar as palavras diferentes de um arquivo texto, diferenciando maiúsculas e minúsculas, e listar as palavras com o número de ocorrências em ordem alfabética. O projeto deve ser desenvolvido utilizando TDD (Test-Driven Development), em C++, com o uso de testes utilizando o Catch framework. A cada passo de desenvolvimento, o código deve ser verificado e revisado de acordo com as especificações fornecidas.

**Estrutura do Programa**:
- O código será dividido em módulos:
  - `conta_palavras.cpp` (implementação da contagem de palavras)
  - `conta_palavras.h` (declarações da função de contagem de palavras)
  - `testa_conta_palavras.cpp` (testes para verificar a funcionalidade)
  - `Makefile` (para compilar o código)
  - `input.txt` (arquivo de entrada)
  - `script_doxygen.py` (para rodar o Doxygen e gerar documentação)

**Javadoc**:
Para documentar o código, será utilizado o estilo de comentários Javadoc. Estes comentários são usados para gerar documentação automática através do Doxygen. Cada função no código deve ser precedida por um comentário no estilo Javadoc, contendo:
- Uma breve descrição da função
- Descrição dos parâmetros, se houver
- Descrição do valor de retorno, se houver

Exemplo de comentário Javadoc para uma função que conta palavras:

```cpp
/**
 * Função para contar a ocorrência de palavras em um arquivo de texto.
 *
 * Esta função lê o arquivo de entrada e conta quantas vezes cada palavra aparece,
 * considerando as diferenças entre maiúsculas e minúsculas.
 * 
 * @param arquivo O caminho do arquivo de texto a ser processado.
 * @return Um vetor contendo pares de palavras e suas respectivas ocorrências.
 */
std::vector<std::pair<std::string, int>> contarPalavras(const std::string& arquivo);
```

**Doxygen**:
Para gerar a documentação do código, utilize o Doxygen. Para isso, siga os passos abaixo:

1. Crie um arquivo de configuração do Doxygen (Doxyfile):
   - Execute o comando: `doxygen -g` no terminal para gerar o arquivo `Doxyfile`.
   
2. Edite o `Doxyfile` para excluir arquivos que não devem ser documentados. Por exemplo, para excluir o arquivo `catch.hpp`, adicione a linha:
   ```text
   EXCLUDE = catch.hpp
   ```

3. Para gerar a documentação em HTML e PDF, execute o comando:
   ```bash
   doxygen Doxyfile
   ```

Isso gerará a documentação no formato desejado.

**Testes**:
Os testes devem ser escritos no arquivo `testa_conta_palavras.cpp` e devem ser desenvolvidos utilizando o framework Catch. A cada novo teste, um commit deve ser realizado. Os testes devem cobrir:
- Contagem de palavras em um arquivo com separação por espaços e quebras de linha.
- Diferença entre maiúsculas e minúsculas.
- Ordenação das palavras por ordem alfabética.

**Especificação**:
- O arquivo de entrada deve conter palavras separadas por espaços ou quebras de linha. As palavras não devem ser normalizadas para minúsculas, conforme a especificação.
- A saída deve ser no formato `palavra: quantidade`, onde `palavra` é a palavra encontrada e `quantidade` é o número de ocorrências.

**Processo de Desenvolvimento**:
O desenvolvimento deve seguir a metodologia TDD, com os seguintes passos:
1. Escrever um teste que falha.
2. Implementar o código necessário para passar o teste.
3. Refatorar o código, se necessário.
4. Realizar um commit para cada mudança significativa.

**Compilação**:
Para compilar o programa, use o comando `make` (ou `mingw32-make.exe` em sistemas Windows). O Makefile foi configurado para compilar o projeto corretamente.

**Comandos Importantes**:
- Para rodar o Doxygen e gerar a documentação:
  ```bash
  doxygen Doxyfile
  ```
- Para rodar os testes:
  ```bash
  make test
  ```

**Outros Verificadores**:
- Utilize o `cppcheck` para verificações estáticas:
  ```bash
  cppcheck --enable=warning .
  ```
- Utilize o `valgrind` para verificações dinâmicas de memória:
  ```bash
  valgrind --leak-check=full ./seu_programa
  ```
- Verifique a cobertura de testes com o `gcov`:
  ```bash
  gcov nome_do_arquivo.cpp
  ```

**Formatos de Arquivo**:
- O arquivo compactado deve ser no formato `matricula_primeiro_nome.zip`, onde `matricula` é o número de matrícula e `primeiro_nome` é o primeiro nome do aluno.

**Observações Importantes**:
- As palavras devem ser diferenciadas entre maiúsculas e minúsculas, conforme a especificação.
- O formato de saída deve seguir o exemplo fornecido na especificação, com a palavra seguida pela quantidade de ocorrências.
